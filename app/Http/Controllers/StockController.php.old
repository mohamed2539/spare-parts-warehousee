<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\StockExport;

class StockController extends Controller
{
    private function stockQuery(Request $request)
    {
        // تجميع الوارد
        $incomingAgg = DB::table('incoming_items')
            ->select('code','item','unit','department','supplier',
                DB::raw('SUM(quantity) as in_qty'))
            ->groupBy('code','item','unit','department','supplier');

        // تجميع الصرف
        $outAgg = DB::table('manual_withdrawals')
            ->select('code','item','unit',
                DB::raw('SUM(quantity) as out_qty'))
            ->groupBy('code','item','unit');

        $q = $request->query('q');
        $department = $request->query('department');
        $supplier = $request->query('supplier');

        $base = DB::query()->fromSub($incomingAgg,'i')
            ->leftJoinSub($outAgg, 'w', function($j){
                $j->on('w.code','=','i.code')
                  ->on('w.item','=','i.item')
                  ->on('w.unit','=','i.unit');
            })
            ->select(
                'i.code','i.item','i.unit','i.department','i.supplier',
                DB::raw('i.in_qty as total_in'),
                DB::raw('COALESCE(w.out_qty,0) as total_out'),
                DB::raw('(i.in_qty - COALESCE(w.out_qty,0)) as balance')
            )
            ->when($q, fn($qr)=>$qr->where(function($w) use ($q){
                $w->where('i.code','like',"%$q%")
                  ->orWhere('i.item','like',"%$q%")
                  ->orWhere('i.unit','like',"%$q%");
            }))
            ->when($department, fn($qr)=>$qr->where('i.department',$department))
            ->when($supplier, fn($qr)=>$qr->where('i.supplier','like',"%$supplier%"))
            ->orderBy('i.item');

        return $base;
    }

    public function index(Request $request)
    {
        // AJAX mode
        if ($request->ajax()) {
            $rows = $this->stockQuery($request)->paginate(20);
            return response()->json($rows);
        }

        // First load: server render
        $rows = $this->stockQuery($request)->paginate(20);
        return view('stock.index', compact('rows'));
    }

    public function export(Request $request)
    {
        return Excel::download(new StockExport($request), 'current_stock.xlsx');
    }
}
